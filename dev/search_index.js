var documenterSearchIndex = {"docs":
[{"location":"kmeans.html#K-Means","page":"K means","title":"K-Means","text":"","category":"section"},{"location":"kmeans.html","page":"K means","title":"K means","text":"The k means using Lloyd's algorithm can be generalized to manifolds, since its first step looks for the closest center of each data point, which can be done in terms of the geodesic distance. The second step of computing the mean within each cluster is generalized to computing the Riemannian center of mass[Karcher1977].","category":"page"},{"location":"kmeans.html","page":"K means","title":"K means","text":"Modules = [ManifoldML]\nPages = [\"kmeans.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"kmeans.html#ManifoldML.KMeansOptions","page":"K means","title":"ManifoldML.KMeansOptions","text":"KMeansOptions <: Options\n\nCollect the data necessary during computation of the k means clustering, i.e.\n\npoints::Vector{P} – the given data\ncenters::Vector{P} – the cluster centrs \nassignment::Vector{<:Int} – a vector the same length as points assigning each of them to a cluster\nstop::StoppingCriterion a stoppingCriterion\n\nHere P is a data type for points on the manifold the points (and centers) live on. This manifold is stored in the KMeansProblem.\n\nConstructor\n\nKMeansOptions(\n    points::Vector{P},\n    centers::Vector{P},\n    stop::StoppingCriterion=StoppingCriterion(100)\n)\n\nInitialize the options. The assignment is set to zero and initialized at the beginning of the algorithm.\n\n\n\n\n\n","category":"type"},{"location":"kmeans.html#ManifoldML.KMeansProblem","page":"K means","title":"ManifoldML.KMeansProblem","text":"KMeansProblem <: Problem\n\nStore the fixed data necessary for kmeans, i.e. only a Manifold M.\n\n\n\n\n\n","category":"type"},{"location":"kmeans.html#ManifoldML.kmeans-Union{Tuple{P}, Tuple{ManifoldsBase.Manifold,Array{P,1}}} where P","page":"K means","title":"ManifoldML.kmeans","text":"kmeans( M::Manifold, pts::Vector{P};\n    num_centers=5,\n    centers = pts[1:num_centers],\n    stop=StopAfterIteration(100),\n    kwargs...\n)\n\nCompute a simple k-means on a Riemannian manifold M for the points pts. The num_centers defaults to 5 and the initial centers centers are set to the first num_centers data items. The stopping criterion is set by default to 100 iterations.\n\nThe kwargs... can be used to initialize RecordOptions or DebugOptions decorators from Manopt.jl\n\nReturns the final KMeansOptions including the final assignment vector and the centers.\n\n\n\n\n\n","category":"method"},{"location":"kmeans.html#Literature","page":"K means","title":"Literature","text":"","category":"section"},{"location":"kmeans.html","page":"K means","title":"K means","text":"[Karcher1977]: Karcher, H.: Riemannian center of mass and mollifier smoothing, Communications on Pure and Applied Mathematics 30(5), 1977, pp. 509–541. doi: 10.1002/cpa.3160300502","category":"page"},{"location":"index.html#Machine-Learning-on-Manifolds","page":"Home","title":"Machine Learning on Manifolds","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package aims to provide machine learning tools on Riemannian manifolds based on ManifoldsBase.jl and Manopt.jl, as well as a few functions from Manifolds.jl. The package is inspired by PosDefManifoldML.jl doing Machine Learning on the Riemannian manifold of symmetric positive definite matrices.","category":"page"}]
}
